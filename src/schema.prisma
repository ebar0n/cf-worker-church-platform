// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("NOT_USED")
}

model Member {
  // Identification and metadata
  id                        Int      @id @default(autoincrement())
  documentID                String   @unique
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  // Personal information
  name                      String
  gender                    String?
  phone                     String
  birthDate                 DateTime?
  maritalStatus             String?
  address                   String?
  email                     String?
  preferredContactMethod    String?

  // Church and spiritual information
  baptismYear               Int?
  ministry                  String?
  areasToServe              String?
  willingToLead             Boolean?
  suggestions               String?
  pastoralNotes             String?
  currentAcceptanceYear     Int?
  currentAcceptanceMethod   String?
  currentMembershipChurch   String?
  transferAuthorization     Boolean?

  // Professional and educational information
  currentOccupation         String?
  workOrStudyPlace          String?
  professionalArea          String?
  educationLevel            String?
  profession                String?
  workExperience            String?

  // Skills and abilities
  technicalSkills           String?
  softSkills                String?
  languages                 String?

  // Health and special needs
  medicalConditions         String?
  specialNeeds              String?

  // Other useful information
  interestsHobbies          String?
  volunteeringAvailability  String?

  // Relations
  childGuardians ChildGuardian[] @relation("ChildGuardians")
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  address   String?
  note      String?
  reason    String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  announcementDate DateTime
  department  String?  // Department code (e.g., "ministerio-infantil-adolescente")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([announcementDate])
  @@index([isActive])
}

// Program/Event information
model Program {
  id          Int      @id @default(autoincrement())
  title       String   // e.g., "Club de Aventureros 2024"
  department  String   // e.g., "club-aventureros"
  content     String?  // Optional: details, directors, organizers, etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  enrollments Enrollment[]

  @@index([department])
  @@index([isActive])
}

// Child information
model Child {
  id            Int      @id @default(autoincrement())
  name          String
  documentID    String   @unique // Required for autocomplete functionality
  gender        String?
  birthDate     DateTime?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  enrollments   Enrollment[] @relation("ChildEnrollments")
  guardians     ChildGuardian[]

  @@index([createdAt])
  @@index([documentID])
}

// Child-Guardian relationship table
model ChildGuardian {
  id            Int      @id @default(autoincrement())
  childId       Int
  memberId      Int
  relationship  String   // "father", "mother", "guardian", "representative"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  child         Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  member        Member   @relation("ChildGuardians", fields: [memberId], references: [id])

  @@unique([childId, relationship])
  @@index([childId])
  @@index([memberId])
  @@index([relationship])
}

// Enrollment system
model Enrollment {
  id          Int      @id @default(autoincrement())
  programId   Int      // Reference to the program/event
  childId     Int      // Required - programs are for children only

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  program     Program  @relation(fields: [programId], references: [id])
  child       Child    @relation("ChildEnrollments", fields: [childId], references: [id])

  @@unique([programId, childId])
  @@index([programId])
  @@index([childId])
  @@index([createdAt])
}
